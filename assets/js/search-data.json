{
  
    
        "post0": {
            "title": "Nbdev Setup 2",
            "content": ". Interest . I created a few play repos in github to try out the nbdev environment. . Nbdev is an environment used by the fastai team to create python modules (and books) as well as tests and documentation all from the Jupyter notebook! . I&#39;ve been looking for something like this for a long long time. There have always been problems with the notebook environment being portrayed as a toy or only for exploration. When you had a finished product you were suppossed to move to a proper IDE and place your code in GIT. . What I did . Log in to Github. | Create your repo using the fastai template. | Now you have a github repo. I called mine &#39;test2&#39; . Next I launched Jupyter Notebook on my laptop. I navigated to the directory where I keep all of my python notebooks. I keep all of my work under my &#39;work//tools//python&#39; folder. I opened a terminal from my jupyter homepage. Changed to my working directory - and cloned my &#39;test2&#39; repo onto my local machine. . Clone your repo to your local machine. I used gh repo clone &lt;github_username&gt;/Test2 from my terminal command line. | I could quickly see my issues and the mess of having notebooks in one folder. There are some template notebooks, some actual work reports, some analysis, some unnamed notebooks. It&#39;s a mess. . With my new cloned repo, everything is in one nice folder. . I could now navigate to the new folder from the Jupyter Notebook Web UI. . Modify settings.ini | Uncomment (remove the #) and change the username, author, lib_name, copyright, keywords and so on at the top of the file. Save it. . Modify 00-core.ipynb. | Open and fill in appropriate names and comments. . Add a few functions with documentation. Execute them - make sure they work . Make sure the use the #export tag at the top of the code cell. . Modify index.ipynb | Change the names appropriately. Call the functions that you created in 00-core - make sure they are working. . Run your Nbdev tools from the terminal window | From your Jupyter Notebook terminal window run the following: . nbdev_install_git_hooks - you should only have to run this one time when your repo is cloned to your local machine. . nbdev_build_lib - builds your library as per your name in settings.ini. . nbdev_build_docs - builds your documentation . and I also run a final check: . nbdev_test_nbs - tests your notebooks on your local machine. . If you get any errors -read carefully - it will tell you what is amiss. Maybe your library didn&#39;t build and you can&#39;t call your function. Maybe you didn&#39;t uncomment &#39;copyright&#39; in the settings file. These things will make your build fail. . Next if everything passes - push it up to github. . From the jupyter terminal window: . git status . git commit -a -m &#39;Initial mods for my library&#39; . git push . I am prompted for my git username and git password and then my repo is updated. . If I go to my github repo, I can see my changes. . . . Next I will work on some documentation and tests. .",
            "url": "https://philescandon.github.io/blog/jupyter/2020/12/29/_12_30Nbdev_Setup.html",
            "relUrl": "/jupyter/2020/12/29/_12_30Nbdev_Setup.html",
            "date": " • Dec 29, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "The holes are bigger than expected",
            "content": ". Completed Video 1 . I completed the first video and purchased the book. I couldn&#39;t complete the binder section of the first lesson. I installed voila and posted my notebook to my github but couldn&#39;t get the notebook to post in binder. I tried for a bit to get it working - but some of these items are rabbit holes for me - I could easily spend the afternoon trying to get binder, voila and github to play nice, but I&#39;m trying to learn about neural networks not deploying to binder. . Important parts . The important parts were completed. I did try to expand on the model - by creating model that could distinguish a meteor in the night sky. After I collected many images of the night sky as well as meteors - all i can say is that Bing Image Search is crap. My initial model was crap mainly because the data was crap. But after a lot of cleaning, deleting, relabeling the experimenting I could only get the model to an accuracy of about 70%. Not good. I didn&#39;t know what else I could to ... but I know it wasn&#39;t ideal. It doesn&#39;t seem trivial to correct a model once it&#39;s gone off the rails. . Video 2 . I began the second video and stopped several times to review material. I finally just watched the entire thing and decided to watch it again, slowly and deliberately. The material..is serious. You are not going to simply watch some videos and voila.. your a PyTorch expert. Learning your way around the fastai API and finding the documentation, forums, etc. does take some exploring time, but it&#39;s fun when you have a destination and goal in mind. I can see what I need. . I&#39;m going to take a little more time with this video and make sure to do the questions at the end of the chapters and learn the jargon and items pointed out during the notebook and video. . Slow going, but I think it&#39;s important. . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. .",
            "url": "https://philescandon.github.io/blog/fastai/2020/12/29/_12_24_Day3.html",
            "relUrl": "/fastai/2020/12/29/_12_24_Day3.html",
            "date": " • Dec 29, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Start of my AI Journey",
            "content": ". First post about my journey. . It&#39;s about time I&#39;ve put some effort into learning Artificial Intelligence, Machine Learning ,Deep Learning and all the other buzzwords. . I ran across fastai while researching news bots, and listening to a podcast about python and journalism. Very interesting I must say. My background? Integration and test of camera systems used on fighter jets. I collect data and use matlab to read in that data and plot it. Collect test data, plot test data and gather the results. . You still have to figure out why components fail. . I rewrote my matlab code into python, liked the results, then started using Jupyter notebooks. Now I&#39;ve found fastai. . How do I plan on using it? I don&#39;t know yet. The computer vision models and using them in the identification of objects in images are surely used somewhere in my company, but that&#39;s not my current domain. . I do have loads and loads of log files. More than I could ever read. This would be an opportunity for using machine learning. . But to what end? To tell me if a system failed a starting test 4 years ago? This is not a problem to be solved. . But a full log file with mission information from a current customer? A model that can quickly deduce what happened when it happened and what was successful and what failed? . Here there is a possible use case! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. .",
            "url": "https://philescandon.github.io/blog/jupyter/2020/12/29/_12_22_Start_of_the_Journey.html",
            "relUrl": "/jupyter/2020/12/29/_12_22_Start_of_the_Journey.html",
            "date": " • Dec 29, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Nbdev setup Blog Post",
            "content": ". Interest . I listened to a couple of podcasts that spoke about Nbdev and it piqued my interest. As I have started going through my fastai book and absorbing as much as I can - I listened to the enumeration of gripes and shortfalls of using jupyter notebooks with git and how to create working modules - all from the jupyter notebook environment. I went through the documentation and was quickly stuck. . What I did . I read slowly. I always have issues with installation instructions - Usually the issue is that I&#39;m not clear where I should complete a command. Am I to install on my laptop environment? Is this command to be run from a python terminal? The jupyter notebook terminal? Do I clone the repo first? . I followed the instructions from the above site. My initial problem was installing the git hooks. My command wouldn&#39;t run. The nbdev_install_git_hooks.exe was not on my system. Obviously... my installation of nbdev was not complete. So I gave up for a day and simply read and tried to figure out what exactly I was doing, where I should do it and when I should do it. . Laptop . Install GIT and GIT Desktop on my windows 10 laptop | Install Nbdev on my laptop. You must be able to call &#39;nbdev_install_git_hooks&#39; or &#39;nbdev_test_nbs&#39; from the command line. If you can&#39;t - you didn&#39;t install correctly. | . Github . I created my first test repo called &#39;dbTest&#39;. I declared it a new repository from a template (fastai/nbdev_template). After I created the repository, I modified all of the required files as per the instructions and modified the correct settings for the repository. . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Clone your modified template repo to your local machine. . Now that you have your repo locally, open a jupyter notebook in the repository directory and modify the 00*.pynb (or create a new notebook) and add functions to your notebook. . Open a terminal from your jupyter notebook. . From this terminal - go to your cloned repo directory. From here, run your Nbdev tools: . Nbdev_install_git_hooks nbdev_build_lib nbdevl build_docs . Commit to github . Now you need to add all of your moodified files git add -A Commit the files git commit -a Push your files to github git push . Details... more details . I will try to make one more test repository and go through the steps. After a second test repo, I will actually try to use nbdev with all of the documentation hooks and extras. Very cool. . &lt;/div&gt;",
            "url": "https://philescandon.github.io/blog/jupyter/2020/12/27/nbdev.html",
            "relUrl": "/jupyter/2020/12/27/nbdev.html",
            "date": " • Dec 27, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://philescandon.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://philescandon.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://philescandon.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://philescandon.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}